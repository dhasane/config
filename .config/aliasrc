#!/bin/sh

# exports

# ssh
export SSH_KEY_PATH="$HOME/.private_keys/id_rsa"

# eval $(keychain --eval --quiet id_ed25519 id_rsa ~/.keys/)
# eval $(keychain --eval --quiet ~/.ssh/id_rsa )
# eval $(keychain --eval --quiet id_rsa $SSH_KEY_PATH)

# alias

alias ssh='eval `keychain --eval --agents ssh $SSH_KEY_PATH`; ssh'
alias pila="upower -d"
alias llaves="gpg --list-secret-keys --keyid-format LONG"
alias pantalla=arandr
alias clima="curl wttr.in"

alias duck="mono ~/.steam/steam/steamapps/common/Duck\ Game/DuckGame.exe"

# sistema

# mostrar todos los archivos de la carpeta, organizados por peso
alias peso='du -shx ./{*,.*} | sort -rh'
alias cont='cd $(continuar)'

# git
alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'
alias gis='git status'
alias gco='git checkout'

alias config-add='cd ~ ; config add $( cat ~/.cfg-add ); cd -; config status'

alias arch-wiki='cd /usr/share/doc/arch-wiki/'

exists() {
    (type "$1" > /dev/null)
}

upd_pacman()
{
    sudo pacman -Syu
    printf "\n\n Terminada actualización pacman \n\n\n"

    exists yay && yay -Syu &&
        printf "\n\n Terminada actualización aur \n\n"

    purgetheorphans
    printf "\n"
}

upd_apt()
{
    sudo apt update
    sudo apt upgrade --fix-missing
    sudo apt dist-upgrade
    sudo apt autoremove
}

upd()
{
    if exists pacman ; then
        echo "actualizando Arch"
        upd_pacman
    elif exists apt ; then
        echo "actualizando Debian"
        upd_apt
    fi

    exists rustup && rustup update
    exists gem && sudo gem update
    exists npm && sudo npm update
}

# colores
alias ip='ip --color=auto'
alias grep='grep --color=auto'
alias diff='diff --color=auto'

man() {
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    command man "$@"
}

export LESS=-R
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline

# usar la primera opcion en caso de ser posible, de lo contrario
# usar la segunda
if_exists_alias()
{
    for i in ${@:2} # todo desde el segundo argumento
    do
        [ "$(command -v "$i")" != "" ] &&
            alias "$1"=" $i" &&
            break
    done
}

if_exists_alias ls exa
if_exists_alias l '" " "exa" "-l"'

# foreach()
# {
#     for i in ${@}
#     do 
# 	echo "$i"
#     done 
# }

alias cd=" cd" # no es necesario que cada cd aparezca en historia
alias sudo='sudo ' # pa los alias
alias rf=' rm -rf'

# alias iwannadai="rm -rf /"
# alias russian="[ $[ $RANDOM % 6 ] = 0 ] && echo 'bang' || echo 'Lucky boi' "

alias showshs="cat /etc/shells" # mostrar todos los shells disponibles
alias changesh='echo $SHELL;showshs;chsh' # cambiar el shell
alias se='ls /usr/bin | grep'

alias usb='cd /run/media/$USER'
alias clear='clear ; [[ ! -z "$TMUX" ]] && tmux clear-history ' # limpiar la pantalla y el historial de tmux

alias matar=pkill
alias word='grep -rnw . -e '
alias open='xdg-open' # abrir archivos con el programa predeterminado

alias practical='nvim -u ~/.vimrc'

# git
alias gis='git status'
alias gca='git commit -a'
alias gco='git checkout'

# evitar abrir vim dentro de vim
open_vim()
{
    if [ -z "$VIMRUNTIME" ]
    then
        nvim $@
    else
        echo ":v"
        for val in $@
        do
            echo "$val"
        done
    fi
}

# alias e='TERM=xterm-256color emacs'
alias e='TERM=xterm-256color emacsclient -nw'
alias em='TERM=xterm-256color emacs -nw'
alias v=' open_vim'
alias vim=' open_vim'
alias sv='sudo nvim'
alias vall=' open_vim $(find . -type f)'
alias viz=' open_vim $(fzf)'
# tmux
alias tkill='tmux kill-session'

# scripts
alias goto=". goto"

# web
alias whats='xdg-open https://web.whatsapp.com/'
alias yt=youtube
alias opgit="xdg-open https://github.com/dhasane"
alias dmusic='youtube-dl --extract-audio -i --audio-format mp3 ' # aqui va el link  # descargar musica

# lenguajes

# construir con make
alias mk=make
alias db='
	if [ ! -d build ]
		then
			echo "carpeta creada"
			mkdir build
		fi;
	cd build;
	cmake ..
	'

alias rb='
	if [ -d build ]
		then
			rm -rf build
			echo "carpeta build eliminada"
		else
			echo "carpeta build inexistente"
		fi;
	'

alias dmk='
	if [ ! -d build ]
		then
			echo "carpeta creada"
			mkdir build
		fi;
	cd build;
	cmake ..;
	make;
	cd ..;
	'

# lenguajes
alias py=python3
alias py2=python2
alias prolog=swipl
alias rr=Rscript
alias jav=javac

###########
# funciones
###########

# subir directorios como : .. # , donde # es el numero de directorios a subir
..() {
    cd $(for ((c=0; c<${1:-1}; ++c)); do echo -n ../; done) || exit
}
alias ..=" .."

# eliminar paquetes huerfanos
# alias purgetheorphans='sudo pacman -Rns $(pacman -Qtdq)'
# para que no salgan errores innecesarios al
# no haber paquetes para eliminar
purgetheorphans() {
    brr=$(pacman -Qtdq)
    # echo "\"$brr\""
    if [ "$brr" != "" ]; then
        echo " Eliminando: "
        sudo pacman -Rns $(pacman -Qtdq)
    else
        echo " No hay paquetes para limpiar"
    fi
}

# Find files with extension
# Usage: fext <ext> [max_depth]
fext() {
  if [ -z "${2}" ]; then
    find . -type f -name "*.${1}"
  else
    find . -maxdepth "${2}" -type f -name "*.${1}"
  fi
}

# Find file/directory by substring
# Usage: fn <substring> [max_depth]
fn() {
  if [ -z "${2}" ]; then
    find . -iname "*${1}*"
  else
    find . -maxdepth "${2}" -iname "*${1}*"
  fi
}

