
# ZZZZZZZZZZZZZZZZZZZ   SSSSSSSSSSSSSSS HHHHHHHHH     HHHHHHHHH
# Z:::::::::::::::::Z SS:::::::::::::::SH:::::::H     H:::::::H
# Z:::::::::::::::::ZS:::::SSSSSS::::::SH:::::::H     H:::::::H
# Z:::ZZZZZZZZ:::::Z S:::::S     SSSSSSSHH::::::H     H::::::HH
# ZZZZZ     Z:::::Z  S:::::S              H:::::H     H:::::H
#         Z:::::Z    S:::::S              H:::::H     H:::::H
#        Z:::::Z      S::::SSSS           H::::::HHHHH::::::H
#       Z:::::Z        SS::::::SSSSS      H:::::::::::::::::H
#      Z:::::Z           SSS::::::::SS    H:::::::::::::::::H
#     Z:::::Z               SSSSSS::::S   H::::::HHHHH::::::H
#    Z:::::Z                     S:::::S  H:::::H     H:::::H
# ZZZ:::::Z     ZZZZZ            S:::::S  H:::::H     H:::::H
# Z::::::ZZZZZZZZ:::ZSSSSSSS     S:::::SHH::::::H     H::::::HH
# Z:::::::::::::::::ZS::::::SSSSSS:::::SH:::::::H     H:::::::H
# Z:::::::::::::::::ZS:::::::::::::::SS H:::::::H     H:::::::H
# ZZZZZZZZZZZZZZZZZZZ SSSSSSSSSSSSSSS   HHHHHHHHH     HHHHHHHHH


[[ $TERM == "tramp" ]] && unsetopt zle && PS1='$ ' && return
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return

# The following lines were added by compinstall
# posibilidades:
# _correct
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|[._-]=** r:|=**'
zstyle :compinstall filename '/home/dhas/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall
# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=10000
setopt autocd extendedglob nomatch notify
unsetopt beep
bindkey -e


# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
[ -d "/home/$USER/.oh-my-zsh" ] && export ZSH="/home/$USER/.oh-my-zsh"

# para mantener lo menor posible de oh my zsh, con el plan de quitarlo eventualmente
[ -d "~/.config/zsh/ohmyzsh" ] && source ~/.config/zsh/ohmyzsh
# sigue teniendo cosas cheveres que no se como copiar >:v

stty -ixon

# colores
autoload -U colors && colors

# visual
if [[ $DISPLAY ]]; then

	# silenciar los sonidos de muerte del sistema
	xset b off
	xset b 0 0 0

    # If not running interactively, do not do anything
    [[ $- != *i* ]] && return

    # deberia ponerle una condicion adicional a esto
    # para poder comenzarlo sin tmux en ocasiones especificas
    # [[ -z "$TMUX" ]] && exec tmux new -A -s Init

else
	# silenciar los sonidos de muerte de la tty
	setterm -blength 0

    # colores sacados del fondo de pantalla
    # wal -Rsq &

	# echo -en "\e]P0232323" #black
    # echo -en "\e]P82B2B2B" #darkgrey
    # echo -en "\e]P1D75F5F" #darkred
    # echo -en "\e]P9E33636" #red
    # echo -en "\e]P287AF5F" #darkgreen
    # echo -en "\e]PA98E34D" #green
    # echo -en "\e]P3D7AF87" #brown
    # echo -en "\e]PBFFD75F" #yellow
    # echo -en "\e]P48787AF" #darkblue
    # echo -en "\e]PC7373C9" #blue
    # echo -en "\e]P5BD53A5" #darkmagenta
    # echo -en "\e]PDD633B2" #magenta
    # echo -en "\e]P65FAFAF" #darkcyan
    # echo -en "\e]PE44C9C9" #cyan
    # echo -en "\e]P7E5E5E5" #lightgrey
    # echo -en "\e]PFFFFFFF" #white
    # clear     #for background artifacting
fi


###########
# funciones
###########

# # Change cursor shape for different vi modes.
# function zle-keymap-select {
#   if [[ ${KEYMAP} == vicmd ]] ||
#      [[ $1 = 'block' ]]; then
#     echo -ne '\e[1 q'
#   elif [[ ${KEYMAP} == main ]] ||
#        [[ ${KEYMAP} == viins ]] ||
#        [[ ${KEYMAP} = '' ]] ||
#        [[ $1 = 'beam' ]]; then
#     echo -ne '\e[5 q'
#   fi
# }
# zle -N zle-keymap-select
# zle-line-init() {
#     zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
#     echo -ne "\e[5 q"
# }
# zle -N zle-line-init
# echo -ne '\e[5 q' # Use beam shape cursor on startup.
# preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

# recargar el shell
src() {
	local cache="$ZSH_CACHE_DIR"
	autoload -U compinit zrecompile
	compinit -i -d "$cache/zcomp-$HOST"

	for f in ~/.zshrc "$cache/zcomp-$HOST"; do
		zrecompile -p $f && command rm -f $f.zwc.old
	done

	# Use $SHELL if available; remove leading dash if login shell
	[[ -n "$SHELL" ]] && exec ${SHELL#-} || exec zsh
}

########
# binds
########

# f5 para sudo !!
# https://unix.stackexchange.com/questions/116562/key-bindings-table
bindkey -s '^[[15~' 'sudo !!^M'

# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line

# bindkey "^[[A" history-search-backward
#
# bindkey "^[[B" history-search-forward

#
# plugins=(
#     fzf
# dirhistory
#
#
#     )

    # autoload znt-history-widget
    # zle -N znt-history-widget
    # bindkey "^R" znt-history-widget

# falta el historial por completicion

# Check if the current directory is in a Git repository.
# USAGE:
#   spaceship::is_git
# spaceship::is_git() {
#   # See https://git.io/fp8Pa for related discussion
#   [[ $(command git rev-parse --is-inside-work-tree 2>/dev/null) == true ]]
# }

# User configuration

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# alias
source ~/.config/aliasrc

###########
# adiciones
###########

# vi-mode
 # perform parameter expansion/command substitution in prompt
bindkey -v
export KEYTIMEOUT=1

# buscar en historia a base de lo que ya se ha escrito
autoload -Uz history-search-end

zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end

bindkey -M vicmd '^[[A' history-beginning-search-backward-end \
                 '^[OA' history-beginning-search-backward-end \
                 '^[[B' history-beginning-search-forward-end  \
                 '^[OB' history-beginning-search-forward-end
bindkey -M viins '^[[A' history-beginning-search-backward-end \
                 '^[OA' history-beginning-search-backward-end \
                 '^[[B' history-beginning-search-forward-end  \
                 '^[OB' history-beginning-search-forward-end

bindkey -a '^[[3~' delete-char
bindkey '^[[3~' delete-char
bindkey "^?" backward-delete-char

#######
# theme
#######

source ~/.config/zsh/themes/tty.zsh
# PS1="> "


# PS1="> "

#######
# otros
#######

# conda -> todas las mierdas de python
[ -f /opt/miniconda3/etc/profile.d/conda.sh ] && source /opt/miniconda3/etc/profile.d/conda.sh

# [ -f /home/dhas/.gem/ruby/2.7.0/bin ] && source /home/dhas/.gem/ruby/2.7.0/bin
# export PATH="${PATH}:${HOME}/.gem/ruby/2.7.0/bin"


#########
# plugins
#########

# local zsh_plugins="$HOME/.config/zsh/plugins"

# https://github.com/zsh-users/zsh-history-substring-search
# source $zsh_plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
#
# bindkey '^[OA' history-substring-search-up
# bindkey '^[OB' history-substring-search-down

# source $zsh_plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

